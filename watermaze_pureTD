{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy.linalg import norm\n",
    "import random\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import cm\n",
    "import math\n",
    "from matplotlib.patches import Circle\n",
    "import mpl_toolkits.mplot3d.art3d as art3d\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "####################################################################################################\n",
    "# watermaze module\n",
    "####################################################################################################\n",
    "class watermaze(object):\n",
    "    \n",
    "    \"\"\"\n",
    "    This class defines a set of functions for simulating a rat moving in a water-maze.\n",
    "    \n",
    "    For the purposes of this assignment, you should be using the move function to \n",
    "    determine the next state of the environment at each time-step of the simulation.\n",
    "    \n",
    "    See the demo of its usage after the module code.\n",
    "    \"\"\"\n",
    "    \n",
    "    ####################################################################\n",
    "    # the initialization function, measurements are in cm\n",
    "    def __init__(self, pool_radius=60, platform_radius=10, platform_location=np.array([25,25]), \n",
    "                 stepsize=5.0, momentum=0.2, T=120):\n",
    "        \n",
    "        \"\"\"\n",
    "        The init function for the watermaze module.\n",
    "        \n",
    "        - The pool_radius argument specifies the radius of the pool.\n",
    "        \n",
    "        - The platform_radius argument specifies the radius of the platform.\n",
    "        \n",
    "        - The platform_location argument specifies the location of the platform centre.\n",
    "        \n",
    "        - The stepsize argument specifies how far the rat moves in one step.\n",
    "        \n",
    "        - The momentum argument specifies the ratio of old movement to new movement direction (i.e. \n",
    "        momentum = 0 means all new movement, momentum = 1 means all old movement, otherwise a mix.\n",
    "        \n",
    "        - The T argument is the maximum time for a trial in the pool.\n",
    "\n",
    "        \n",
    "        \"\"\"\n",
    "        \n",
    "        # store the given info\n",
    "        self.radius            = pool_radius\n",
    "        self.platform_radius   = platform_radius\n",
    "        self.platform_location = platform_location\n",
    "        self.stepsize          = stepsize\n",
    "        self.momentum          = momentum\n",
    "        self.T                 = T\n",
    "        \n",
    "        # a dictionary for calculating directions\n",
    "        self.direction = {\n",
    "            0:  np.pi/2, #north\n",
    "            1:  np.pi/4, #north-east\n",
    "            2:  0, #east\n",
    "            3:  7*np.pi/4, #south-east\n",
    "            4:  3*np.pi/2, #south\n",
    "            5:  5*np.pi/4, #south-west\n",
    "            6:  np.pi, #west\n",
    "            7:  3*np.pi/4, #north-west\n",
    "        }\n",
    "        \n",
    "        # initialize the dynamic variables\n",
    "        self.position = np.zeros((2,T))\n",
    "        self.t        = 0\n",
    "        self.prevdir  = np.zeros((2,))\n",
    "        \n",
    "    ####################################################################\n",
    "    # for updating the rat's position in the pool\n",
    "    def move(self, A):\n",
    "\n",
    "        \"\"\"\n",
    "        Updates the simulated rat's position in the water-maze environment by moving it in the \n",
    "        specified direction. \n",
    "        \n",
    "        - The argument A is the last selected action, and must be an integer from 0-7, with 0 indicating N, \n",
    "        1 indicating NE, etc. \n",
    "\n",
    "        \"\"\"\n",
    "        \n",
    "        # check the A argument\n",
    "        if (not np.isin(A, np.arange(8))):\n",
    "            print('Error: The argument A must be an integer from 0-7, indicating which action was selected.')\n",
    "\n",
    "        # determine the vector of direction of movement\n",
    "        angle = self.direction[A]\n",
    "        newdirection = np.array([np.cos(angle), np.sin(angle)])\n",
    "        \n",
    "        # add in momentum to reflect actual swimming dynamics (and normalize, then multiply by stepsize)\n",
    "        direction = (1.0 - self.momentum)*newdirection + self.momentum*self.prevdir\n",
    "        direction = direction/np.sqrt((direction**2).sum())\n",
    "        direction = direction*self.stepsize\n",
    "        \n",
    "        # update the position, prevent the rat from actually leaving the water-maze by having it \"bounce\" off the wall \n",
    "        [newposition, direction] = self.poolreflect(self.position[:,self.t] + direction)\n",
    "\n",
    "        # if we're now at the very edge of the pool, move us in a little-bit\n",
    "        if (np.linalg.norm(newposition) == self.radius):\n",
    "            newposition = np.multiply(np.divide(newposition,np.linalg.norm(newposition)),(self.radius - 1))\n",
    "\n",
    "        # update the position, time (and previous direction)\n",
    "        self.position[:,self.t+1] = newposition\n",
    "        self.t                    = self.t + 1\n",
    "        self.prevdir              = direction\n",
    "        \n",
    "    ####################################################################\n",
    "    # for bouncing the rat off the wall of the pool\n",
    "    def poolreflect(self, newposition):\n",
    "        \n",
    "        \"\"\"\n",
    "        The poolreflect function returns the point in space at which the rat will be located if it \n",
    "        tries to move from the current position to newposition but bumps off the wall of the pool. \n",
    "        If the rat would not bump into the wall, then it simply returns newposition. The function \n",
    "        also returns the direction the rat will be headed.\n",
    "        \"\"\"\n",
    "\n",
    "        # determine if the newposition is outside the pool, if not, just return the new position\n",
    "        if (np.linalg.norm(newposition) < self.radius):\n",
    "            refposition  = newposition\n",
    "            refdirection = newposition - self.position[:,self.t]\n",
    "\n",
    "        else:\n",
    "\n",
    "            # determine where the rat will hit the pool wall\n",
    "            px = self.intercept(newposition)\n",
    "            \n",
    "            # get the tangent vector to this point by rotating -pi/2\n",
    "            tx = np.asarray(np.matmul([[0, 1], [-1, 0]],px))\n",
    "\n",
    "            # get the vector of the direction of movement\n",
    "            dx = px - self.position[:,self.t]\n",
    "            \n",
    "            # get the angle between the direction of movement and the tangent vector\n",
    "            theta = np.arccos(np.matmul((np.divide(tx,np.linalg.norm(tx))).transpose(),(np.divide(dx,np.linalg.norm(dx))))).item()\n",
    "\n",
    "            # rotate the remaining direction of movement vector by 2*(pi - theta) to get the reflected direction\n",
    "            ra = 2*(np.pi - theta)\n",
    "            refdirection = np.asarray(np.matmul([[np.cos(ra), -np.sin(ra)], [np.sin(ra), np.cos(ra)]],(newposition - px)))\n",
    "\n",
    "            # get the reflected position\n",
    "            refposition = px + refdirection\n",
    "\n",
    "        # make sure the new position is inside the pool\n",
    "        if (np.linalg.norm(refposition) > self.radius):\n",
    "            refposition = np.multiply((refposition/np.linalg.norm(refposition)),(self.radius - 1))\n",
    "\n",
    "        return [refposition, refdirection]\n",
    "    \n",
    "    ####################################################################\n",
    "    # for checking when/where the rat hits the edge of the pool\n",
    "    def intercept(self,newposition):\n",
    "        \n",
    "        \"\"\"\n",
    "        The intercept function returns the point in space at which the rat will intercept with the pool wall \n",
    "        if it is moving from point P1 to point P2 in space, given the pool radius.\n",
    "        \"\"\"\n",
    "        \n",
    "        # for easy referencing, set p1 and p2\n",
    "        p1 = self.position[:,self.t]\n",
    "        p2 = newposition\n",
    "\n",
    "        # calculate the terms used to find the point of intersection\n",
    "        dx = p2[0] - p1[0]\n",
    "        dy = p2[1] - p1[1]\n",
    "        dr = np.sqrt(np.power(dx,2) + np.power(dy,2))\n",
    "        D  = p1[0]*p2[1] - p2[0]*p1[1]\n",
    "        sy = np.sign(dy)\n",
    "        if (sy == 0):\n",
    "            sy = 1.0\n",
    "            \n",
    "        # calculate the potential points of intersection\n",
    "        pp1 = np.zeros((2,))\n",
    "        pp2 = np.zeros((2,))\n",
    "\n",
    "        pp1[0] = (D*dy + sy*dx*np.sqrt((np.power(self.radius,2))*(np.power(dr,2))-np.power(D,2)))/(np.power(dr,2))\n",
    "        pp2[0] = (D*dy - sy*dx*np.sqrt((np.power(self.radius,2))*(np.power(dr,2))-np.power(D,2)))/(np.power(dr,2))\n",
    "        pp1[1] = (-D*dx + np.absolute(dy)*np.sqrt((np.power(self.radius,2))*(np.power(dr,2))-np.power(D,2)))/(np.power(dr,2))\n",
    "        pp2[1] = (-D*dx - np.absolute(dy)*np.sqrt((np.power(self.radius,2))*(np.power(dr,2))-np.power(D,2)))/(np.power(dr,2))\n",
    "\n",
    "        # determine which intersection point is actually the right one (whichever is closer to p2)\n",
    "        if np.linalg.norm(p2 - pp1) < np.linalg.norm(p2 - pp2):\n",
    "            px = pp1\n",
    "\n",
    "        else:\n",
    "            px = pp2\n",
    "        \n",
    "        return px\n",
    "    \n",
    "    ####################################################################\n",
    "    # sets the start position of the rat in the pool\n",
    "    def startposition(self):\n",
    "\n",
    "        # select a random location from the main cardinal axes and calculate it's vector angle\n",
    "        condition = 2*np.random.randint(0,4)\n",
    "        angle = self.direction[condition]\n",
    "\n",
    "        self.position[:,0] = np.asarray([np.cos(angle), np.sin(angle)]) * (self.radius - 1)\n",
    "        \n",
    "    ####################################################################\n",
    "    # plot the most recent path of the rat through the pool\n",
    "    def plotpath(self):\n",
    "        \n",
    "        # create the figure \n",
    "        fig = plt.figure()\n",
    "        ax = fig.gca()\n",
    "\n",
    "        # create the pool perimeter\n",
    "        pool_perimeter = plt.Circle((0, 0), self.radius, fill=False, color='b', ls='-')\n",
    "        ax.add_artist(pool_perimeter)\n",
    "\n",
    "        # create theplatform\n",
    "        platform = plt.Circle(self.platform_location, self.platform_radius, fill=False, color='r', ls='-')\n",
    "        ax.add_artist(platform)\n",
    "\n",
    "        # plot the path\n",
    "        plt.plot(self.position[0,0:self.t],self.position[1,0:self.t], color='k', ls='-')\n",
    "\n",
    "        # plot the final location and starting location\n",
    "        plt.plot(self.position[0,0],self.position[1,0],color='b', marker='o',markersize=4, markerfacecolor='b')\n",
    "        plt.plot(self.position[0,self.t-1],self.position[1,self.t-1],color='r', marker='o',markersize=6, markerfacecolor='r')\n",
    "\n",
    "        # adjust the axis\n",
    "        ax.axis('equal')\n",
    "        ax.set_xlim((-self.radius-50, self.radius+50))\n",
    "        ax.set_ylim((-self.radius-50, self.radius+50))\n",
    "        plt.xticks(np.arange(-self.radius, self.radius+20, step=20))\n",
    "        plt.yticks(np.arange(-self.radius, self.radius+20, step=20))\n",
    "        ax.set_xlabel('X Position (cm)')\n",
    "        ax.set_ylabel('Y Position (cm)')\n",
    "\n",
    "        # turn on the grid\n",
    "        plt.grid(True)\n",
    "        plt.tight_layout()\n",
    "\n",
    "        # show the figure\n",
    "        plt.show()\n",
    "        \n",
    "    ####################################################################\n",
    "    # checks whether the time is up\n",
    "    def timeup(self):\n",
    "        \n",
    "        \"\"\"\n",
    "        Returns true if the time for the trial is finished, false otherwise.\n",
    "        \"\"\"\n",
    "        \n",
    "        return self.t > (self.T - 2)\n",
    "    \n",
    "    ####################################################################\n",
    "    # checks whether the rat has found the platform\n",
    "    def atgoal(self):\n",
    "        \n",
    "        \"\"\"\n",
    "        Returns true if the rat is on the platform, false otherwise.\n",
    "        \"\"\"\n",
    "        \n",
    "        return np.sqrt(np.sum((self.position[:,self.t] - self.platform_location)**2)) <= (self.platform_radius + 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Clever rat, you found the platform in 8 seconds!\n"
     ]
    }
   ],
   "source": [
    "# demo of how to use the watermaze module\n",
    "\n",
    "# create the watermaze object\n",
    "maze = watermaze()\n",
    "\n",
    "# set the starting location\n",
    "maze.startposition()\n",
    "\n",
    "# run forward for one trial (using random actions for sake of illustration)\n",
    "while(not maze.timeup() and not maze.atgoal()):\n",
    "    \n",
    "    # select a random action - this is what your actor critic network needs to provide\n",
    "    A = np.random.randint(0,8)\n",
    "    \n",
    "    # move the rat\n",
    "    maze.move(A)\n",
    "    \n",
    "# plot the path\n",
    "maze.plotpath()\n",
    "\n",
    "# print out why the trial ended (note, if the rat reached the goal, then you must deliver a reward)\n",
    "if maze.atgoal():\n",
    "    print(\"Clever rat, you found the platform in\",maze.t,\"seconds!\")\n",
    "else:\n",
    "    print(\"No more time for you dumb-dumb...\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "#helper functions to initialize the place cell center points in a circular manner \n",
    "#from https://stackoverflow.com/questions/33510979/generator-of-evenly-spaced-points-in-a-circle-in-python\n",
    "def circle_points(r, n): #r is array of radii, n is number of points per radius\n",
    "    circles = [] \n",
    "    for r, n in zip(r, n):\n",
    "        t = np.linspace(0, (2*math.pi), n)\n",
    "        x = r * np.cos(t)\n",
    "        y = r * np.sin(t)\n",
    "        circles.append(np.c_[x, y])\n",
    "    return circles\n",
    "\n",
    "def initialize_place_cells(): \n",
    "    #hard code in r and n to get the 493 place cells for this purpose\n",
    "    r = [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60] #radii of concentric circles\n",
    "    n = [1,7, 15,20,25,35,50,60,80,90,110] # 493 place cells total; number of place cells per concentric circle\n",
    "    cells = np.array(circle_points(r, n))\n",
    "    stacked = np.vstack(cells)\n",
    "    return np.array(stacked)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "class actor_critic(object):\n",
    "    def __init__(self, place_cells=initialize_place_cells(), critic_network=np.full(493,0.5), actor_network=np.zeros((493,8)), gamma=.98, alpha_A=.1,alpha_C=.01 ,sigma=16.0,platform_radius=10, platform_location=np.array([[25],[25]])): #gamma is the discount; alpha is the learning rate\n",
    "       \n",
    "        self.place_cells = place_cells #stores the value of the center of the placefield, initialized above ^\n",
    "        \n",
    "        self.W = critic_network.astype(float) #493x1 array btw 1 critic and 493 place cells\n",
    "        \n",
    "        self.Z = actor_network.astype(float) #network of weights btw actor and place cells (493,8)\n",
    "        \n",
    "        self.maze = watermaze()\n",
    "        \n",
    "        self.gamma = gamma #discount factor\n",
    "        self.alpha_A = alpha_A #learning rate for actor\n",
    "        self.alpha_C = alpha_C #learning rate for critic\n",
    "        self.sigma = sigma #radius of the place field\n",
    "    \n",
    "        self.platform_location = platform_location #same platform location as the mouse maze one; in multi-platform case you input the other platform as an argument to the funtion.\n",
    "       \n",
    "        self.platform_radius = platform_radius \n",
    "        \n",
    "    def get_position(self):\n",
    "        cur_t = self.maze.t\n",
    "        cur_x = self.maze.position[0][cur_t] #to convert the position to an [x,y] format that is more easily accessible\n",
    "        cur_y = self.maze.position[1][cur_t]\n",
    "        return (cur_x, cur_y)\n",
    "    \n",
    "    #Equation 1: the fi function. returns an (493,) array of the activities of all the cells\n",
    "    def place_activity(self):\n",
    "        cur_pos = self.get_position() #get the current position\n",
    "        pos_vec = np.array([cur_pos]*493) #get a vector to get all the activities at once\n",
    "        norms = np.linalg.norm(pos_vec-self.place_cells, axis=1) #take the norm along each row (each pair of points)\n",
    "        norms_sqr = np.square(norms).astype(float)\n",
    "        fi = np.exp(-norms_sqr/(2*self.sigma**2))\n",
    "        #scale the activity values to avoid overflow:\n",
    "        if abs(np.amax(fi))>=100:\n",
    "            fi = (100.0*fi)/abs(np.amax(fi))  \n",
    "        return np.array(fi).astype(float) #returns the activities of the place cells at the current position.\n",
    "        \n",
    "    \n",
    "    #the aj function. returns a 8,1 array of the activities of the actor cells at this current position.\n",
    "    def actor_activity(self):\n",
    "        a = ((self.Z).T).dot(self.place_activity())\n",
    "        if abs(np.amax(a))>=100:\n",
    "            a = (100.0*a)/abs(np.amax(a)) #again, limit size of activies to avoid overflow error\n",
    "        return a.astype(float)   \n",
    "    \n",
    "    #Equation 9. PMF of the distribution. stochastic probability of swimming in a direction\n",
    "    def ProbJ(self, actor_activity):\n",
    "        values = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "        prob_dist = np.exp(2.0*actor_activity)/np.sum(np.exp(2.0*actor_activity))\n",
    "        choice = np.random.choice(values, 1, p=prob_dist) #use random choice to sample from the discrete distribution w/the probabilities specified by eqn. 9\n",
    "        return choice[0]\n",
    "       \n",
    "    #Equation 2: C(p) function, at the current location.\n",
    "    def Critic_Value(self): \n",
    "        Cp = (self.W).dot(self.place_activity()) #sum of wifi\n",
    "        return Cp \n",
    "\n",
    "    #to see if the mouse has found the platform\n",
    "    def found_platform(self):\n",
    "        cur_pos = self.get_position()\n",
    "        x = cur_pos[0]\n",
    "        y = cur_pos[1]\n",
    "        coords = np.array([x, y])\n",
    "        return np.sqrt(np.sum((coords - self.platform_location)**2)) <= (self.platform_radius + 1)\n",
    "    \n",
    "    \n",
    "    #reward for the single platform case\n",
    "    def get_reward(self):\n",
    "        if self.found_platform(): \n",
    "            return 1.0\n",
    "        else:\n",
    "            return 0.0\n",
    "  \n",
    "    #calculates the derivative wrt weights of the loss function, mulitplied by the initial activities\n",
    "    #basically the right side of equation 8\n",
    "    def E2(self, Cp_curpos, Cp_nextpos, Rt, initial_activities):\n",
    "        deriv = (Rt+self.gamma*Cp_nextpos-Cp_curpos)*initial_activities #multiplies each entry in the activity matrix by this coefficient\n",
    "        return deriv #a 1,144 matrix\n",
    "    \n",
    "    #function to update self.W (between Critic and Place cells); 144,1 array\n",
    "    #updating W according to equation 8\n",
    "    def update_W(self, Cp_curpos, Cp_nextpos, Rt, initial_activities):\n",
    "        deriv = self.E2(Cp_curpos, Cp_nextpos, Rt, initial_activities) #calculate the gradient\n",
    "        updated = self.W+self.alpha_C*deriv #multiply the current \n",
    "        self.W = updated\n",
    "  \n",
    "    #update Actor-place weights, according to equation 9.\n",
    "    def update_Z(self,Cp_curpos, Cp_nextpos, Rt, initial_activities, move_index):        \n",
    "        delta = self.E2(Cp_curpos, Cp_nextpos, Rt, initial_activities) #calculate the gradient\n",
    "        delta = delta.flatten()\n",
    "        col = self.Z[:,move_index] \n",
    "        col = col+self.alpha_A*delta\n",
    "        self.Z[:,move_index] = col #only the column that corresponds to the index of the chosen actor cell gets updated; others stay the same\n",
    "        \n",
    "    #to reset the positions stored, set time to 0, and choose a new start location for the rat between epochs\n",
    "    def reset_trial(self, start_pos):\n",
    "        self.maze.position = np.zeros((2,self.maze.T))\n",
    "        self.maze.t = 0\n",
    "        condition = 2*start_pos\n",
    "        angle = self.maze.direction[condition]\n",
    "        self.maze.position[:,0] = np.asarray([np.cos(angle), np.sin(angle)]) * (self.maze.radius - 1)\n",
    "\n",
    "    #to train the model and update the weights\n",
    "    #num_epochs is # of epochs, multi_platform is True/False to choose if you want 2 platforms, plot_all is T/F to choose if you want all the path plots to be shown (since plotting each time can clutter the screen)\n",
    "    def train(self, num_epochs, multi_platform, plot_all): \n",
    "        self.maze.startposition()\n",
    "        epochs_arr = np.arange(1, num_epochs+1, 1)  #make arrays to store the time it took for each epoch\n",
    "        trial_lengths = np.zeros(num_epochs)\n",
    "        \n",
    "        for epoch in range(num_epochs):\n",
    "            print(\"Epoch: \", epoch)\n",
    "\n",
    "            \n",
    "            if(not multi_platform):\n",
    "                print(\"======Single-Platform RMW=====\")\n",
    "                \n",
    "            if(multi_platform and epoch%10==0): #switch the platform every 5 trials\n",
    "                print(\"======Multi-Platform DMP=====\")\n",
    "                #generate a random point to start the platform at\n",
    "                R= 45 #radius of the pool - a little bit so that it doesnt generate too close to the edge\n",
    "                r = R * math.sqrt(np.random.rand())\n",
    "                theta = np.random.rand()*2*math.pi\n",
    "                x = r*np.cos(theta)\n",
    "                y =  r*np.sin(theta)\n",
    "\n",
    "                self.maze.platform_location = np.array([x,y])\n",
    "                self.platform_location = np.array([x,y])\n",
    "            \n",
    "            \n",
    "            start_ind=np.random.randint(0, 4) #choose a new start index for each epoch and use it for reset_trial function\n",
    "            self.reset_trial(start_ind)\n",
    "            while((not self.maze.timeup())): \n",
    "                cur_pos = self.get_position() #starting position\n",
    "                init_pc_activities = self.place_activity() #initial place activity\n",
    "                cp_cur = self.Critic_Value() #critic value...\n",
    "        \n",
    "                init_actor_activities = self.actor_activity() #store the actor activity, used in the probability function (but probably not even necessary)\n",
    "        \n",
    "                R1 = self.get_reward() #reward at time t\n",
    "                \n",
    "                move_index = self.ProbJ(init_actor_activities) #best movement index according to the probability distribution fn.\n",
    "                self.maze.move(move_index)\n",
    "                new_pos = self.get_position() #position after move\n",
    "                new_activities = self.place_activity() #activity after move\n",
    "                cp_after = self.Critic_Value() #critic value after move\n",
    "                self.update_W(cp_cur, cp_after, R1, new_activities)\n",
    "                self.update_Z(cp_cur, cp_after, R1,new_activities, move_index)\n",
    "\n",
    "                #if its not multiplatform, check if it's reached the one and only platform and set the time accordingly\n",
    "                if(self.found_platform()):\n",
    "                    print(\"Reached goal!\") \n",
    "                    trial_lengths[epoch] = self.maze.t\n",
    "                    if(plot_all):\n",
    "                        self.maze.plotpath()\n",
    "                    break\n",
    "\n",
    "                #if it times out, print time's up and set the corresponding slot in the array to None (indicating it was unsuccessful)\n",
    "                if(self.maze.timeup()):\n",
    "                    print(\"Time's up.\")\n",
    "                    \n",
    "                    trial_lengths[epoch] = None\n",
    "                    if(plot_all):\n",
    "                        self.maze.plotpath()\n",
    "\n",
    "                    break\n",
    "       \n",
    "            print(\"===================================================\")\n",
    "\n",
    "        #plot the latency\n",
    "        plt.plot(epochs_arr,trial_lengths)\n",
    "        plt.xlabel('Epoch number')\n",
    "        plt.ylabel('Time steps')\n",
    "        if(multi_platform):\n",
    "            plt.title(\"Actor-Critic DMP Performance\")\n",
    "            plt.savefig('pt1_DMP.eps')\n",
    "        elif(not multi_platform):\n",
    "            plt.title(\"Actor-Critic RMW Performance\")\n",
    "            plt.savefig('pt1_RMW.eps')\n",
    "        plt.show()\n",
    "\n",
    "    \n",
    "        \n",
    "        \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch:  0\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  1\n",
      "======Single-Platform RMW=====\n",
      "Time's up.\n",
      "===================================================\n",
      "Epoch:  2\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  3\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  4\n",
      "======Single-Platform RMW=====\n",
      "Time's up.\n",
      "===================================================\n",
      "Epoch:  5\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  6\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  7\n",
      "======Single-Platform RMW=====\n",
      "Time's up.\n",
      "===================================================\n",
      "Epoch:  8\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  9\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  10\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  11\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  12\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  13\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  14\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  15\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  16\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  17\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  18\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  19\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  20\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  21\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  22\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  23\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  24\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  25\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  26\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  27\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  28\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n",
      "Epoch:  29\n",
      "======Single-Platform RMW=====\n",
      "Reached goal!\n",
      "===================================================\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'\\nMulti-Platform:\\ninitialized to 50 epochs, multi-platform (changing every 10 epochs, not plotting each path (plot_all=False)\\n'"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "Finally, creating and training the model. Uncomment the act.train(...) one by one to run each case :) \n",
    "\"\"\"\n",
    "\n",
    "act = actor_critic()\n",
    "\n",
    "\"\"\"\n",
    "Single-Platform:\n",
    "Initialized to 50 epochs, single-platform (multi_platform=False), not plotting each path (plot_all=False).\n",
    "\"\"\"\n",
    "\n",
    "act.train(30, False,False)\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "Multi-Platform:\n",
    "initialized to 50 epochs, multi-platform (changing every 10 epochs, not plotting each path (plot_all=False)\n",
    "\"\"\"\n",
    "#act.train(50, True, False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
